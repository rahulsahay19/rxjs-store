import {Component, OnInit, ViewEncapsulation} from '@angular/core';
import {concat, fromEvent, interval, noop, observable, Observable, of, timer, merge, Subject} from 'rxjs';
import {delayWhen, filter, map, take, timeout} from 'rxjs/operators';
import {createHttpObservable} from '../common/util';


@Component({
    selector: 'about',
    templateUrl: './about.component.html',
    styleUrls: ['./about.component.css']
})
export class AboutComponent implements OnInit {

    ngOnInit() {

        //Behaviour subject is similar to subject, but it allows late subscription.
        const subject = new Subject();

        
        const series$ = subject.asObservable();

        //This is early subscription
        series$.subscribe(val => console.log('Early subscription: ' + val));

        //fromPromise is the desired way of creating our own observable from promise.
        //similarly, from used from browser events. In some case, if this is not 
        //acceptable, then subject is the prefered way of creating custom observables.

        //emitting values
        subject.next(1);
        subject.next(2);
        subject.next(3);
      //  subject.complete();

      setTimeout(() => {
          // This won't log any values.
        series$.subscribe(val => console.log('late subscription: ' + val));
      }, 3000);
    }


}






