import {Component, OnInit, ViewEncapsulation} from '@angular/core';
import {concat, fromEvent, interval, noop, observable, Observable, of, timer, merge, Subject, BehaviorSubject, AsyncSubject} from 'rxjs';
import {delayWhen, filter, map, take, timeout} from 'rxjs/operators';
import {createHttpObservable} from '../common/util';


@Component({
    selector: 'about',
    templateUrl: './about.component.html',
    styleUrls: ['./about.component.css']
})
export class AboutComponent implements OnInit {

    ngOnInit() {

        //async subject:- async subject is ideal for long running calculations.
        const subject = new AsyncSubject();

        const series$ = subject.asObservable();

        series$.subscribe(val => console.log('First sub: ' + val));

       //emitting values
       //This will emit only the last value. And if completed is commented, then it won't work. completeion is mandatory.
        subject.next(1);
        subject.next(2);
        subject.next(3);
        
        subject.complete();

        
        // This will also emit the last value not the intermediate value.
        setTimeout(() => {
            series$.subscribe(val => console.log('2nd sub: ' + val));
        
        }, 3000);
        
    }


}






